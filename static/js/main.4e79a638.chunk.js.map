{"version":3,"sources":["store/actions/actionTypes.js","store/actions/auth.js","store/actions/stocks.js","components/Register.js","components/Login.js","components/AuthRedirect.js","components/AuthShow.js","components/AuthHide.js","components/Home.js","components/Search.js","components/Stocks.js","components/Symbol.js","components/Transactions.js","components/Owned.js","App.js","store/reducers/auth.js","store/reducers/stocks.js","index.js"],"names":["AUTHORIZE","DEAUTHORIZE","LOADING_FINISH","LOAD_STOCKS","UPDATE_QUANTITY","LOAD_TRANSACTIONS","NEW_TRANSACTION","SET_CASH","SET_ERROR_MESSAGE","ADD_STOCK","ADD_NEW_ID","authorize","type","actionTypes","setCash","cash","setErrorMessage","message","fetchStocks","dispatch","jwtToken","localStorage","getItem","axios","get","headers","Authorization","then","response","stocks","data","catch","error","actions","updateQuantity","symbol","value","sell","max","buyStock","stock","quantity","index","post","_id","transaction","newId","setItem","fetchTransactions","transactions","connect","onPostRegister","registerForm","history","console","dir","token","expires","Date","now","Number","expiresIn","push","onSetErrorMessage","props","useState","username","password","confirmPassword","setRegisterForm","useHistory","handleInput","e","registerFormCopy","target","name","onSubmit","preventDefault","htmlFor","id","onChange","required","minLength","aria-label","onPostLogin","loginForm","setLoginForm","loginFormCopy","state","isAuth","auth","isLoading","log","Fragment","children","to","Home","onFetchStocks","onUpdateQuantity","onBuyStock","onAddStock","useEffect","length","displayStock","search","setSearch","setIndex","companyName","prices","map","price","getAttribute","findIndex","buyQuantity","totalPrice","data-symbol","onClick","min","searchIndex","toUpperCase","result","maxLength","displayStocks","change","toFixed","useParams","filter","el","isTransactionsLoaded","onFetchTransactions","displayTransactions","date","toLocaleDateString","reverse","owned","sellStock","ownedQuantity","sellQuantity","totalValue","displayOwned","key","errorMessage","onAuthorize","onDeauthorize","onLoadingFinish","onSetCash","listen","location","expiration","isLoggedIn","className","removeItem","path","exact","href","initialState","action","deauthorize","loadingFinish","reducer","loadStocks","stocksCopy","createOwned","loadTransactions","newTransaction","addStock","addNewId","stocksReducer","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","rootReducer","combineReducers","store","createStore","applyMiddleware","thunk","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.4e79a638.chunk.js","sourcesContent":["export const AUTHORIZE = \"AUTHORIZE\";\nexport const DEAUTHORIZE = \"DEAUTHORIZE\";\nexport const LOADING_FINISH = \"LOADING_FINISH\";\n\nexport const LOAD_STOCKS = \"LOAD_STOCKS\";\nexport const UPDATE_QUANTITY = \"UPDATE_QUANTITY\";\n\nexport const LOAD_TRANSACTIONS = \"LOAD_TRANSACTIONS\"\nexport const NEW_TRANSACTION = \"NEW_TRANSACTION\";\n\nexport const SET_CASH = \"SET_CASH\";\nexport const SET_ERROR_MESSAGE = \"SET_ERROR_MESSAGE\"\n\nexport const ADD_STOCK = \"ADD_STOCK\";\nexport const ADD_NEW_ID = \"ADD_NEW_ID\";\n\n","import * as actionTypes from \"../actions/actionTypes\";\nimport axios from \"axios\";\n\n// Authorize user\nexport const authorize = () => {\n  return {\n    type: actionTypes.AUTHORIZE,\n  };\n};\n\n// Deauthorize user\nexport const deauthorize = () => {\n  return {\n    type: actionTypes.DEAUTHORIZE,\n  };\n};\n\n// Stop loading\nexport const loadingFinish = () => {\n  return {\n    type: actionTypes.LOADING_FINISH,\n  };\n};\n\nexport const setCash = (cash) => {\n  return {\n    type: actionTypes.SET_CASH,\n    cash,\n  };\n};\n\nexport const setErrorMessage = (message) => {\n  return {\n    type: actionTypes.SET_ERROR_MESSAGE,\n    message,\n  }\n}\n\n// Handle login submission to backend\nexport const postLogin = (loginForm, history) => {\n  return (dispatch) => {\n    axios\n      .post(\"http://localhost:3000/login\", {\n        ...loginForm,\n      })\n      .then((response) => {\n        console.dir(response);\n        // Store jwt token and when it expires in local storage\n        localStorage.setItem(\"jwtToken\", response.data.token);\n        const expires = Date.now() + Number(response.data.expiresIn);\n        localStorage.setItem(\"jwtExpires\", expires);\n\n        // Redirect to home page\n        history.push(\"/\");\n\n        // Login user with redux state auth\n        dispatch(authorize());\n\n        // Save users cash\n        localStorage.setItem(\"cash\", response.data.cash);\n        dispatch(setCash(response.data.cash));\n      })\n      .catch((error) => {\n        if (error.response) {\n          dispatch(setErrorMessage(error.response.data.message))\n        } else {\n          dispatch(setErrorMessage(\"Something went wrong\"))\n        }\n      });\n  };\n};\n\n// Handle register user on the backend\nexport const postRegister = (registerForm, history) => {\n  return (dispatch) => {\n    axios\n      .post(\"http://localhost:3000/register\", {\n        ...registerForm,\n      })\n      .then((response) => {\n        console.dir(response);\n        // Store jwt token and when it expires in local storage\n        localStorage.setItem(\"jwtToken\", response.data.token);\n        const expires = Date.now() + Number(response.data.expiresIn);\n        localStorage.setItem(\"jwtExpires\", expires);\n\n        // Redirect to home page\n        history.push(\"/\");\n\n        // Login user with redux state auth\n        dispatch(authorize());\n\n        // Save users cash\n        localStorage.setItem(\"cash\", response.data.cash);\n        dispatch(setCash(response.data.cash));\n      })\n      .catch((error) => {\n        if (error.response) {\n          dispatch(setErrorMessage(error.response.data.message))\n        } else {\n          dispatch(setErrorMessage(\"Something went wrong\"))\n        }\n      });\n  };\n};\n","import * as actionTypes from \"../actions/actionTypes\";\nimport * as actions from \"./index\";\nimport axios from \"axios\";\n\n// Authorize user\nexport const loadStocks = (stocks) => {\n  return {\n    type: actionTypes.LOAD_STOCKS,\n    stocks,\n  };\n};\n\n// Fetch stocks from database\nexport const fetchStocks = () => {\n  return (dispatch) => {\n    const jwtToken = localStorage.getItem(\"jwtToken\");\n    axios\n      .get(\"http://localhost:3000/stocks\", {\n        headers: {\n          Authorization: `Bearer ${jwtToken}`,\n        },\n      })\n      .then((response) => {\n        dispatch(loadStocks(response.data.stocks));\n      })\n      .catch((error) => {\n        if (error.response) {\n          dispatch(actions.setErrorMessage(error.response.data.message))\n        } else {\n          dispatch(actions.setErrorMessage(\"Something went wrong\"))\n        }\n      });\n  };\n};\n\n// Change quantity to buy based on user input\nexport const updateQuantity = (symbol, value, sell, max) => {\n  return {\n    type: actionTypes.UPDATE_QUANTITY,\n    symbol,\n    value,\n    sell,\n    max,\n  };\n};\n\nexport const newTransaction = (transaction) => {\n  return {\n    type: actionTypes.NEW_TRANSACTION,\n    transaction,\n  };\n};\n\nexport const addNewId = (_id) => {\n  return {\n    type: actionTypes.ADD_NEW_ID,\n    _id,\n  };\n};\n\n// Buy a stock on the backend\nexport const buyStock = (stock, quantity, index) => {\n  return (dispatch) => {\n    const jwtToken = localStorage.getItem(\"jwtToken\");\n    axios\n      .post(\n        \"http://localhost:3000/stocks/buy\",\n        { stock, quantity },\n        {\n          headers: {\n            Authorization: `Bearer ${jwtToken}`,\n          },\n        }\n      )\n      .then((response) => {\n        // Add id if result was from stock api search\n        dispatch(addNewId(response.data.newId));\n\n        // Save updated cash value\n        dispatch(actions.setCash(response.data.cash));\n        localStorage.setItem(\"cash\", response.data.cash);\n\n        // Push to transactions state\n        dispatch(actions.newTransaction(response.data.transaction));\n      })\n      .catch((error) => {\n        if (error.response) {\n          dispatch(actions.setErrorMessage(error.response.data.message))\n        } else {\n          dispatch(actions.setErrorMessage(\"Something went wrong\"))\n        }\n      });\n  };\n};\n\nexport const loadTransactions = (transactions) => {\n  return {\n    type: actionTypes.LOAD_TRANSACTIONS,\n    transactions,\n  };\n};\n\n// Fetch stocks from database\nexport const fetchTransactions = () => {\n  return (dispatch) => {\n    const jwtToken = localStorage.getItem(\"jwtToken\");\n    axios\n      .get(\"http://localhost:3000/stocks/transactions\", {\n        headers: {\n          Authorization: `Bearer ${jwtToken}`,\n        },\n      })\n      .then((response) => {\n        dispatch(loadTransactions(response.data.transactions));\n      })\n      .catch((error) => {\n        if (error.response) {\n          dispatch(actions.setErrorMessage(error.response.data.message))\n        } else {\n          dispatch(actions.setErrorMessage(\"Something went wrong\"))\n        }\n      });\n  };\n};\n\n// Add new stock to state from search results\nexport const addStock = (stock) => {\n  return {\n    type: actionTypes.ADD_STOCK,\n    stock,\n  };\n};\n","import React, { useState } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport { connect } from \"react-redux\";\nimport * as actions from \"../store/actions/index\";\n\nconst Register = (props) => {\n  const [registerForm, setRegisterForm] = useState({\n    username: \"\",\n    password: \"\",\n    confirmPassword: \"\",\n  });\n\n  let history = useHistory();\n\n  // Change register details when inputs change\n  const handleInput = (e) => {\n    const registerFormCopy = {\n      ...registerForm,\n      [e.target.name]: e.target.value,\n    };\n    setRegisterForm(registerFormCopy);\n    props.onSetErrorMessage(\"\")\n  };\n\n  // Submit register form handler\n  const handleSubmission = (e) => {\n    e.preventDefault();\n\n    // Submit to backend\n    props.onPostRegister(registerForm, history);\n  };\n\n  return (\n    <div>\n      <h1>Register</h1>\n      <form onSubmit={handleSubmission}>\n        <div>\n          <label htmlFor=\"username\">Username</label>\n          <input\n            type=\"text\"\n            id=\"username\"\n            name=\"username\"\n            value={registerForm.username}\n            onChange={handleInput}\n            required\n          />\n        </div>\n        <div>\n          <label htmlFor=\"password\">Password</label>\n          <input\n            type=\"password\"\n            id=\"password\"\n            name=\"password\"\n            value={registerForm.password}\n            onChange={handleInput}\n            required\n            minLength=\"8\"\n          />\n        </div>\n        <div>\n          <label htmlFor=\"confirmPassword\">Confirm Password</label>\n          <input\n            type=\"password\"\n            id=\"confirmPassword\"\n            name=\"confirmPassword\"\n            value={registerForm.confirmPassword}\n            onChange={handleInput}\n            required\n            minLength=\"8\"\n          />\n        </div>\n        <button type=\"submit\" aria-label=\"submit\">\n          Submit\n        </button>\n      </form>\n    </div>\n  );\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    onPostRegister: (registerForm, history) => {\n      dispatch(actions.postRegister(registerForm, history));\n    },\n    onSetErrorMessage: (message) => {\n      dispatch(actions.setErrorMessage(message))\n    }\n  };\n};\n\nexport default connect(null, mapDispatchToProps)(Register);\n","import React, { useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport * as actions from \"../store/actions/index\"\nimport { useHistory } from \"react-router-dom\";\n\nconst Login = (props) => {\n  const [loginForm, setLoginForm] = useState({\n    username: \"\",\n    password: \"\",\n  });\n\n  // const [errorMessage, setErrorMessage] = useState(\"\");\n\n  // Change register details when inputs change\n  const handleInput = (e) => {\n    const loginFormCopy = {\n      ...loginForm,\n      [e.target.name]: e.target.value,\n    };\n    setLoginForm(loginFormCopy);\n    props.onSetErrorMessage(\"\");\n  };\n\n  let history = useHistory();\n\n  // Submit register form handler\n  const handleSubmission = (e) => {\n    e.preventDefault();\n\n    // Submit to backend\n    props.onPostLogin(loginForm, history)\n    \n  };\n\n  return (\n    <div>\n      <h1>Login</h1>\n      <form onSubmit={handleSubmission}>\n        <div>\n          <label htmlFor=\"username\">Username</label>\n          <input\n            type=\"text\"\n            id=\"username\"\n            name=\"username\"\n            value={loginForm.username}\n            onChange={handleInput}\n            required\n          />\n        </div>\n        <div>\n          <label htmlFor=\"password\">Password</label>\n          <input\n            type=\"password\"\n            id=\"password\"\n            name=\"password\"\n            value={loginForm.password}\n            onChange={handleInput}\n            required\n            minLength=\"8\"\n          />\n        </div>\n        <button type=\"submit\" aria-label=\"submit\">\n          Submit\n        </button>\n      </form>\n    </div>\n  );\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    onPostLogin: (loginForm, history) => {\n      dispatch(actions.postLogin(loginForm, history));\n    },\n    onSetErrorMessage: (message) => {\n      dispatch(actions.setErrorMessage(message))\n    }\n  }\n}\n\nexport default connect(null, mapDispatchToProps)(Login);\n","import React from \"react\";\nimport { Redirect } from \"react-router-dom\";\nimport { connect } from \"react-redux\";\n\nconst AuthRedirect = (props) => {\n  console.log(\"authredirect\")\n  let display;\n  if (props.isAuth) {\n    display = <React.Fragment>{props.children}</React.Fragment>;\n  } else if (props.isLoading) {\n    display = <h1>Loading...</h1>\n  } else {\n    display = <Redirect to=\"/login\" />;\n  }\n  return display;\n};\n\nconst mapStateToProps = (state) => {\n  return {\n    isAuth: state.auth.isAuth,\n    isLoading: state.auth.isLoading,\n  };\n};\n\nexport default connect(mapStateToProps)(AuthRedirect);\n","import React from \"react\";\nimport {connect} from \"react-redux\"\n\nconst AuthShow = (props) => {\n  let display;\n  if (props.isAuth) {\n    display = <React.Fragment>{props.children}</React.Fragment>;\n  } else {\n    display = null;\n  }\n  return display;\n};\n\nconst mapStateToProps = (state) => {\n  return {\n    isAuth: state.auth.isAuth,\n  };\n};\n\nexport default connect(mapStateToProps)(AuthShow);\n","import React from 'react'\nimport { connect } from \"react-redux\";\n\nconst AuthHide = props => {\n  let display;\n  if (!props.isAuth) {\n    display = <React.Fragment>{props.children}</React.Fragment>;\n  } else {\n    display = null;\n  }\n  return (\n    display\n  )\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    isAuth: state.auth.isAuth,\n  }\n}\n\nexport default connect(mapStateToProps)(AuthHide)\n","import React from 'react'\n\nconst Home = () => {\n  return (\n    <div>\n      <h1>Home</h1>\n      <p>A site to practice trading stocks</p>\n      <p>Uses real data which is updated daily</p>\n      <p>With risk free simulated trades and portfolios</p>\n    </div>\n  )\n}\n\nexport default Home\n","import React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport { connect } from \"react-redux\";\nimport * as actions from \"../store/actions/index\";\n\nconst Search = (props) => {\n  useEffect(() => {\n    // If hasn't been run before fetch stocks from database\n    if (!props.stocks.length) {\n      props.onFetchStocks();\n    } else {\n      // Reset buy quantity for all stocks\n      for (let stock of props.stocks) {\n        props.onUpdateQuantity(stock.symbol, 0);\n      }\n    }\n\n    // eslint-disable-next-line\n  }, []);\n\n  // Buy a stock\n  const buyStock = (e) => {\n    e.preventDefault();\n    const symbol = e.target.getAttribute(\"data-symbol\");\n\n    // Find index of stock being bought\n    const index = props.stocks.findIndex((stock) => stock.symbol === symbol);\n\n    // Check if user can afford to buy the quantity entered\n    const price =\n      props.stocks[index].prices[props.stocks[index].prices.length - 1];\n    const quantity = props.stocks[index].buyQuantity;\n    const totalPrice = price * quantity;\n    if (totalPrice !== 0 && totalPrice < props.cash) {\n      props.onBuyStock(props.stocks[index], quantity, index);\n    } else {\n      if (quantity === 0) {\n        props.onSetErrorMessage(\"Quantity cannot be 0\")\n      }\n      if (totalPrice < props.cash) {\n        props.onSetErrorMessage(\"Cannot afford\")\n      }\n    }\n  };\n\n  const [search, setSearch] = useState(\"\");\n\n  // Update search term with users input\n  const handleInput = (e) => {\n    setSearch(e.target.value);\n    props.onSetErrorMessage(\"\")\n  };\n\n  const [index, setIndex] = useState(-1);\n\n  // Handle submission of search form\n  const handleSubmission = (e) => {\n    e.preventDefault();\n    console.log(search);\n\n    // Check state for search term first\n    const searchIndex = props.stocks.findIndex((stock) => {\n      return stock.symbol === search.toUpperCase();\n    });\n\n    // If found in state display results from it\n    if (searchIndex !== -1) {\n      props.onSetErrorMessage(\"\")\n      setIndex(searchIndex);\n    } else {\n      // If not found in state check database and stock api\n      const jwtToken = localStorage.getItem(\"jwtToken\");\n      axios\n        .post(`http://localhost:3000/search`, {symbol: search}, {\n          headers: {\n            Authorization: `Bearer ${jwtToken}`,\n          },\n        })\n        .then((response) => {\n          const result = response.data;\n\n          // Add stock to state\n          props.onAddStock({\n            symbol: result.symbol,\n            companyName: result.companyName,\n            prices: result.prices,\n            buyQuantity: 0,\n          });\n\n          // Index will then be set to the newly added stock which is last\n          setIndex(props.stocks.length);\n        })\n        .catch((error) => {\n          setIndex(-1);\n          if (error.response) {\n            props.onSetErrorMessage(error.response.data.message);\n          } else {\n            props.onSetErrorMessage(\"Something went wrong\")\n          }\n        });\n    }\n  };\n\n  // Display result of search\n  let displayStock;\n  if (index !== -1) {\n    displayStock = [\n      <div key={props.stocks[index].symbol}>\n        <h1>{props.stocks[index].symbol}</h1>\n        <p>Company: {props.stocks[index].companyName}</p>\n        <p>Price history</p>\n        {props.stocks[index].prices.map((price, index) => {\n          return <span key={index}>{price}, </span>;\n        })}\n        <form onSubmit={buyStock} data-symbol={props.stocks[index].symbol}>\n          <button\n            type=\"button\"\n            aria-label=\"subtract 1\"\n            onClick={() =>\n              props.onUpdateQuantity(\n                props.stocks[index].symbol,\n                props.stocks[index].buyQuantity - 1\n              )\n            }\n          >\n            -\n          </button>\n          <input\n            type=\"number\"\n            id=\"quantity\"\n            name=\"quantity\"\n            aria-label=\"quantity\"\n            value={props.stocks[index].buyQuantity}\n            min=\"0\"\n            onChange={(e) =>\n              props.onUpdateQuantity(props.stocks[index].symbol, e.target.value)\n            }\n          />\n          <button\n            type=\"button\"\n            aria-label=\"add 1\"\n            onClick={() =>\n              props.onUpdateQuantity(\n                props.stocks[index].symbol,\n                props.stocks[index].buyQuantity + 1\n              )\n            }\n          >\n            +\n          </button>\n          {/* <span>{stock.prices[stock.prices.length - 1] * stock.buyQuantity}</span> */}\n          <button type=\"submit\">Buy</button>\n        </form>\n      </div>,\n    ];\n  }\n\n  return (\n    <div>\n      <h1>Search by Symbol</h1>\n      <form onSubmit={handleSubmission}>\n        <div>\n          <label htmlFor=\"search\">Symbol</label>\n          <input\n            type=\"text\"\n            id=\"search\"\n            name=\"search\"\n            value={search}\n            onChange={handleInput}\n            required\n            maxLength=\"6\"\n          />\n        </div>\n        <button type=\"submit\">Search</button>\n      </form>\n      {displayStock}\n    </div>\n  );\n};\n\nconst mapStateToProps = (state) => {\n  return {\n    stocks: state.stocks.stocks,\n    cash: state.auth.cash,\n  };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    onFetchStocks: () => {\n      dispatch(actions.fetchStocks());\n    },\n    onUpdateQuantity: (symbol, value) => {\n      dispatch(actions.updateQuantity(symbol, value));\n    },\n    onBuyStock: (stock, quantity, index) => {\n      dispatch(actions.buyStock(stock, quantity, index));\n    },\n    onAddStock: (stock) => {\n      dispatch(actions.addStock(stock));\n    },\n    onSetErrorMessage: (message) => {\n      dispatch(actions.setErrorMessage(message));\n    },\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Search);\n","import React, { useEffect } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { connect } from \"react-redux\";\nimport * as actions from \"../store/actions/index\";\n\nconst Stocks = (props) => {\n  useEffect(() => {\n    // If hasn't been run before fetch stocks from database\n    if (!props.stocks.length) {\n      props.onFetchStocks();\n    } else {\n      // Reset buy quantity for all stocks\n      for (let stock of props.stocks) {\n        props.onUpdateQuantity(stock.symbol, 0);\n      }\n    }\n\n    // eslint-disable-next-line\n  }, []);\n\n  // Buy a stock\n  const buyStock = (e) => {\n    e.preventDefault();\n    const symbol = e.target.getAttribute(\"data-symbol\");\n\n    // Find index of stock being bought\n    const index = props.stocks.findIndex((stock) => stock.symbol === symbol);\n\n    // Check if user can afford to buy the quantity entered\n    const price =\n      props.stocks[index].prices[props.stocks[index].prices.length - 1];\n    const quantity = props.stocks[index].buyQuantity;\n    const totalPrice = price * quantity;\n    console.log(totalPrice);\n    if (totalPrice !== 0 && totalPrice < props.cash) {\n      props.onBuyStock(props.stocks[index], quantity, index);\n      props.onUpdateQuantity(symbol, 0);\n    } else {\n      console.log(\"Can't Afford or quantity 0\");\n    }\n  };\n\n  const displayStocks = props.stocks.map((stock) => {\n    // Percentage change since yesterday\n    const change =\n      ((stock.prices[stock.prices.length - 1] -\n        stock.prices[stock.prices.length - 2]) /\n        stock.prices[stock.prices.length - 2]) *\n      100;\n    return (\n      <tr key={stock.symbol}>\n        <td>\n          <Link to={`/stocks/${stock.symbol}`}>{stock.symbol}</Link>\n        </td>\n        <td>{stock.companyName}</td>\n        <td>{stock.prices.length > 1 ? change.toFixed(2) + \"%\" : \"-\"}</td>\n        <td>{stock.prices[stock.prices.length - 1].toFixed(2)}</td>\n        <td>\n          <form onSubmit={buyStock} data-symbol={stock.symbol}>\n            <button\n              type=\"button\"\n              aria-label=\"subtract 1\"\n              onClick={() =>\n                props.onUpdateQuantity(stock.symbol, stock.buyQuantity - 1)\n              }\n            >\n              -\n            </button>\n            <input\n              type=\"number\"\n              id=\"quantity\"\n              name=\"quantity\"\n              aria-label=\"quantity\"\n              value={stock.buyQuantity}\n              min=\"0\"\n              onChange={(e) =>\n                props.onUpdateQuantity(stock.symbol, e.target.value)\n              }\n            />\n            <button\n              type=\"button\"\n              aria-label=\"add 1\"\n              onClick={() =>\n                props.onUpdateQuantity(stock.symbol, stock.buyQuantity + 1)\n              }\n            >\n              +\n            </button>\n            {/* <span>{stock.prices[stock.prices.length - 1] * stock.buyQuantity}</span> */}\n            <button type=\"submit\">Buy</button>\n          </form>\n        </td>\n      </tr>\n    );\n  });\n\n  return (\n    <div>\n      <table>\n        <thead>\n          <tr>\n            <th>Symbol</th>\n            <th>Company</th>\n            <th>Change</th>\n            <th>Price</th>\n            <th>Buy</th>\n          </tr>\n        </thead>\n        <tbody>{displayStocks}</tbody>\n      </table>\n    </div>\n  );\n};\n\nconst mapStateToProps = (state) => {\n  return {\n    stocks: state.stocks.stocks,\n    cash: state.auth.cash,\n  };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    onFetchStocks: () => {\n      dispatch(actions.fetchStocks());\n    },\n    onUpdateQuantity: (symbol, value) => {\n      dispatch(actions.updateQuantity(symbol, value));\n    },\n    onBuyStock: (stock, quantity, index) => {\n      dispatch(actions.buyStock(stock, quantity, index));\n    },\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Stocks);\n","import React, { useEffect } from \"react\";\nimport { connect } from \"react-redux\";\nimport { useParams } from \"react-router-dom\";\nimport * as actions from \"../store/actions/index\";\n\nconst Symbol = (props) => {\n  // If hasn't been run before\n  useEffect(() => {\n    if (!props.stocks.length) {\n      props.onFetchStocks();\n    } else {\n      // Reset buy quantity for all stocks\n      for (let stock of props.stocks) {\n        props.onUpdateQuantity(stock.symbol, 0);\n      }\n    }\n    // eslint-disable-next-line\n  }, []);\n\n  // Buy a stock\n  const buyStock = (e) => {\n    e.preventDefault();\n    const symbol = e.target.getAttribute(\"data-symbol\");\n\n    // Find index of stock being bought\n    const index = props.stocks.findIndex((stock) => stock.symbol === symbol);\n\n    // Check if user can afford to buy the quantity entered\n    const price =\n      props.stocks[index].prices[props.stocks[index].prices.length - 1];\n    const quantity = props.stocks[index].buyQuantity;\n    const totalPrice = price * quantity;\n    console.log(totalPrice);\n    if (totalPrice !== 0 && totalPrice < props.cash) {\n      props.onBuyStock(props.stocks[index], quantity, index);\n      props.onUpdateQuantity(symbol, 0);\n    } else {\n      console.log(\"Can't Afford or quantity 0\");\n    }\n  };\n\n  // Find stock with with symbol in url\n  const { symbol } = useParams();\n  const stock = props.stocks.filter((el) => {\n    return el.symbol === symbol.toUpperCase();\n  });\n\n  let displayStock = [];\n  if (stock.length) {\n    displayStock = stock.map((el) => {\n      return (\n        <div key={el.symbol}>\n          <h1>{el.symbol}</h1>\n          <p>{el.companyName}</p>\n          <p>Price history</p>\n          {el.prices.map((price, index) => {\n            return <span key={index}>{price}, </span>;\n          })}\n          <form onSubmit={buyStock} data-symbol={el.symbol}>\n            <button\n              type=\"button\"\n              aria-label=\"subtract 1\"\n              onClick={() =>\n                props.onUpdateQuantity(el.symbol, el.buyQuantity - 1)\n              }\n            >\n              -\n            </button>\n            <input\n              type=\"number\"\n              id=\"quantity\"\n              name=\"quantity\"\n              aria-label=\"quantity\"\n              value={el.buyQuantity}\n              min=\"0\"\n              onChange={(e) =>\n                props.onUpdateQuantity(el.symbol, e.target.value)\n              }\n            />\n            <button\n              type=\"button\"\n              aria-label=\"add 1\"\n              onClick={() =>\n                props.onUpdateQuantity(el.symbol, el.buyQuantity + 1)\n              }\n            >\n              +\n            </button>\n            {/* <span>{stock.prices[stock.prices.length - 1] * stock.buyQuantity}</span> */}\n            <button type=\"submit\">Buy</button>\n          </form>\n        </div>\n      );\n    });\n  }\n\n  return <div>{displayStock}</div>;\n};\n\nconst mapStateToProps = (state) => {\n  return {\n    stocks: state.stocks.stocks,\n  };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    onFetchStocks: () => {\n      dispatch(actions.fetchStocks());\n    },\n    onUpdateQuantity: (symbol, value) => {\n      dispatch(actions.updateQuantity(symbol, value));\n    },\n    onBuyStock: (stock, quantity, index) => {\n      dispatch(actions.buyStock(stock, quantity, index));\n    },\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Symbol);\n","import React, { useEffect } from \"react\";\nimport { connect } from \"react-redux\";\nimport { Link } from \"react-router-dom\";\nimport * as actions from \"../store/actions/index\";\n\nconst Transactions = (props) => {\n  useEffect(() => {\n    if (!props.stocks.length) {\n      props.onFetchStocks();\n    }\n    if (!props.isTransactionsLoaded) {\n      props.onFetchTransactions();\n    }\n  });\n\n  const displayTransactions = props.transactions.map((transaction) => {\n    const stock = props.stocks.filter((el) => {\n      return transaction.stock === el._id;\n    })[0];\n    return (\n      <tr key={transaction._id}>\n        <td>\n          <Link to={`/stocks/${stock.symbol}`}>{stock.symbol}</Link>\n        </td>\n        <td>{stock.companyName}</td>\n        <td>{new Date(transaction.date).toLocaleDateString()}</td>\n        <td>{transaction.quantity}</td>\n        <td>{transaction.price.toFixed(2)}</td>\n      </tr>\n    );\n  });\n  return (\n    <div>\n      <table>\n        <thead>\n          <tr>\n            <th>Symbol</th>\n            <th>Company</th>\n            <th>Date</th>\n            <th>Quantity</th>\n            <th>Price</th>\n          </tr>\n        </thead>\n        <tbody>{displayTransactions.reverse()}</tbody>\n      </table>\n    </div>\n  );\n};\n\nconst mapStateToProps = (state) => {\n  return {\n    stocks: state.stocks.stocks,\n    transactions: state.stocks.transactions,\n    isTransactionsLoaded: state.stocks.isTransactionsLoaded,\n  };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    onFetchStocks: () => {\n      dispatch(actions.fetchStocks());\n    },\n    onFetchTransactions: () => {\n      dispatch(actions.fetchTransactions());\n    },\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Transactions);\n","import React, { useEffect } from \"react\";\nimport { connect } from \"react-redux\";\nimport { Link } from \"react-router-dom\";\nimport * as actions from \"../store/actions/index\";\n\nconst Owned = (props) => {\n  useEffect(() => {\n    if (!props.stocks.length) {\n      props.onFetchStocks();\n    } else {\n      // Reset buy quantity for all stocks\n      for (let stock of props.stocks) {\n        props.onUpdateQuantity(stock.symbol, 0);\n      }\n    }\n    if (!props.isTransactionsLoaded) {\n      props.onFetchTransactions();\n    }\n    // eslint-disable-next-line\n  }, []);\n\n  const buyStock = (e) => {\n    e.preventDefault();\n    const symbol = e.target.getAttribute(\"data-symbol\");\n\n    // Find index of stock being bought\n    const index = props.stocks.findIndex((stock) => stock.symbol === symbol);\n\n    // Check if user can afford to buy the quantity entered\n    const price =\n      props.stocks[index].prices[props.stocks[index].prices.length - 1];\n    const quantity = props.stocks[index].buyQuantity;\n    const totalPrice = price * quantity;\n    console.log(totalPrice);\n    if (quantity !== 0 && totalPrice < props.cash) {\n      props.onBuyStock(props.stocks[index], quantity, index);\n      props.onUpdateQuantity(symbol, 0);\n    } else {\n      console.log(\"Can't Afford or quantity 0\");\n    }\n  };\n\n  const sellStock = (e) => {\n    e.preventDefault();\n    const symbol = e.target.getAttribute(\"data-symbol\");\n\n    // Find index of stock being bought\n    const index = props.stocks.findIndex((stock) => stock.symbol === symbol);\n\n    // Check that the user has the stock quantity to sell\n    const ownedQuantity = props.owned[symbol].quantity;\n    const quantity = props.stocks[index].sellQuantity;\n    if (quantity !== 0 && quantity <= ownedQuantity) {\n      props.onBuyStock(props.stocks[index], -quantity, index);\n      props.onUpdateQuantity(symbol, 0, \"sell\");\n    }\n  };\n\n  let totalValue = 0;\n  const displayOwned = [];\n  for (let key in props.owned) {\n    // Use stock from props.stocks to use buy quantity\n    const stock = props.stocks.filter((stock) => key === stock.symbol)[0];\n\n    // Percentage change since yesterday\n    const change =\n      ((stock.prices[stock.prices.length - 1] -\n        stock.prices[stock.prices.length - 2]) /\n        stock.prices[stock.prices.length - 2]) *\n      100;\n    displayOwned.push(\n      <tr key={key}>\n        <td>\n          <Link to={`/stocks/${key}`}>{key}</Link>\n        </td>\n        <td>{stock.companyName}</td>\n        <td>{stock.prices.length > 1 ? change.toFixed(2) + \"%\" : \"-\"}</td>\n        <td>{props.owned[key].quantity}</td>\n        <td>{stock.prices[stock.prices.length - 1].toFixed(2)}</td>\n        <td>\n          {(\n            stock.prices[stock.prices.length - 1] * props.owned[key].quantity\n          ).toFixed(2)}\n        </td>\n        <td>\n          <form onSubmit={buyStock} data-symbol={stock.symbol}>\n            <button\n              type=\"button\"\n              aria-label=\"subtract 1\"\n              onClick={() =>\n                props.onUpdateQuantity(stock.symbol, stock.buyQuantity - 1)\n              }\n            >\n              -\n            </button>\n            <input\n              type=\"number\"\n              id=\"quantity\"\n              name=\"quantity\"\n              aria-label=\"quantity\"\n              value={stock.buyQuantity}\n              min=\"0\"\n              onChange={(e) =>\n                props.onUpdateQuantity(stock.symbol, e.target.value)\n              }\n            />\n            <button\n              type=\"button\"\n              aria-label=\"add 1\"\n              onClick={() =>\n                props.onUpdateQuantity(stock.symbol, stock.buyQuantity + 1)\n              }\n            >\n              +\n            </button>\n            {/* <span>{stock.prices[stock.prices.length - 1] * stock.buyQuantity}</span> */}\n            <button type=\"submit\">Buy</button>\n          </form>\n        </td>\n        <td>\n          <form onSubmit={sellStock} data-symbol={stock.symbol}>\n            <button\n              type=\"button\"\n              aria-label=\"subtract 1\"\n              onClick={() =>\n                props.onUpdateQuantity(\n                  stock.symbol,\n                  stock.sellQuantity - 1,\n                  \"sell\",\n                  props.owned[key].quantity\n                )\n              }\n            >\n              -\n            </button>\n            <input\n              type=\"number\"\n              id=\"quantity\"\n              name=\"quantity\"\n              aria-label=\"quantity\"\n              value={stock.sellQuantity}\n              min=\"0\"\n              onChange={(e) =>\n                props.onUpdateQuantity(\n                  stock.symbol,\n                  e.target.value,\n                  \"sell\",\n                )\n              }\n              max={props.owned[key].quantity}\n            />\n            <button\n              type=\"button\"\n              aria-label=\"add 1\"\n              onClick={() =>\n                props.onUpdateQuantity(\n                  stock.symbol,\n                  stock.sellQuantity + 1,\n                  \"sell\",\n                  props.owned[key].quantity\n                )\n              }\n            >\n              +\n            </button>\n            {/* <span>{stock.prices[stock.prices.length - 1] * stock.buyQuantity}</span> */}\n            <button type=\"submit\">Sell</button>\n          </form>\n        </td>\n      </tr>\n    );\n\n    // Add to total value\n    totalValue +=\n      stock.prices[stock.prices.length - 1] * props.owned[key].quantity;\n  }\n\n  return (\n    <div>\n      <h1>Owned</h1>\n      <div>\n        <table>\n          <thead>\n            <tr>\n              <th>Symbol</th>\n              <th>Company</th>\n              <th>Change</th>\n              <th>Quantity</th>\n              <th>Price</th>\n              <th>Value</th>\n              <th>Buy</th>\n              <th>Sell</th>\n            </tr>\n            <tr></tr>\n          </thead>\n          <tbody>{displayOwned}</tbody>\n          <tfoot>\n            <tr>\n              <td></td>\n              <td></td>\n              <td></td>\n              <td></td>\n              <td>Cash: </td>\n              <td>{props.cash.toFixed(2)}</td>\n            </tr>\n            <tr>\n              <td></td>\n              <td></td>\n              <td></td>\n              <td></td>\n              <td>Total: </td>\n              <td>{(totalValue + props.cash).toFixed(2)}</td>\n            </tr>\n          </tfoot>\n        </table>\n      </div>\n    </div>\n  );\n};\n\nconst mapStateToProps = (state) => {\n  return {\n    stocks: state.stocks.stocks,\n    owned: state.stocks.owned,\n    isTransactionsLoaded: state.stocks.isTransactionsLoaded,\n    cash: state.auth.cash,\n  };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    onFetchStocks: () => {\n      dispatch(actions.fetchStocks());\n    },\n    onFetchTransactions: () => {\n      dispatch(actions.fetchTransactions());\n    },\n    onUpdateQuantity: (symbol, value, sell, max) => {\n      dispatch(actions.updateQuantity(symbol, value, sell, max));\n    },\n    onBuyStock: (stock, quantity, index) => {\n      dispatch(actions.buyStock(stock, quantity, index));\n    },\n  };\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(Owned);\n","import \"./App.css\";\nimport React, { useEffect } from \"react\";\nimport { Switch, Route, Link, useHistory } from \"react-router-dom\";\nimport Register from \"./components/Register\";\nimport Login from \"./components/Login\";\nimport AuthRedirect from \"./components/AuthRedirect\";\nimport AuthShow from \"./components/AuthShow\";\nimport AuthHide from \"./components/AuthHide\";\nimport Home from \"./components/Home\";\nimport Search from \"./components/Search\";\nimport Stocks from \"./components/Stocks\";\nimport Symbol from \"./components/Symbol\";\nimport Transactions from \"./components/Transactions\";\nimport Owned from \"./components/Owned\";\n\nimport { connect } from \"react-redux\";\nimport * as actions from \"./store/actions/index\";\n\nconst App = (props) => {\n  let history = useHistory();\n\n  // Reset error message if changing pages\n  history.listen((location) => {\n    props.onSetErrorMessage(\"\")\n  })\n\n  // Check if user has a valid token in local storage\n  const isLoggedIn = () => {\n    const expiration = localStorage.getItem(\"jwtExpires\");\n    return expiration && Number(expiration) > Date.now();\n  };\n\n  // Authorize user if they have a valid token\n  useEffect(() => {\n    if (isLoggedIn()) {\n      props.onAuthorize();\n      props.onSetCash(localStorage.getItem(\"cash\"));\n    }\n    props.onLoadingFinish();\n    // eslint-disable-next-line\n  }, []);\n\n  const logout = () => {\n    localStorage.removeItem(\"jwtToken\");\n    localStorage.removeItem(\"jwtExpires\");\n    localStorage.removeItem(\"cash\");\n    history.push(\"/\");\n    props.onDeauthorize();\n  };\n\n  return (\n    <div className=\"App\">\n      <nav>\n        <ul>\n          <li>\n            <Link to=\"/\">Home</Link>\n          </li>\n          <AuthHide>\n            <li>\n              <Link to=\"/register\">Register</Link>\n            </li>\n          </AuthHide>\n          <AuthHide>\n            <li>\n              <Link to=\"/login\">Login</Link>\n            </li>\n          </AuthHide>\n          <AuthShow>\n            <li>\n              <Link to=\"/transactions\">Transactions</Link>\n            </li>\n          </AuthShow>\n          <AuthShow>\n            <li>\n              <Link to=\"/stocks\">Stocks</Link>\n            </li>\n          </AuthShow>\n          <AuthShow>\n            <li>\n              <Link to=\"/owned\">Owned</Link>\n            </li>\n          </AuthShow>\n          <AuthShow>\n            <li>\n              <Link to=\"/search\">Search</Link>\n            </li>\n          </AuthShow>\n          <AuthShow>\n            <li>\n              <button onClick={logout}>Log out</button>\n            </li>\n          </AuthShow>\n          <AuthShow>\n            <li>Cash: ${props.cash}</li>\n          </AuthShow>\n          <h2>{props.errorMessage}</h2>\n        </ul>\n      </nav>\n      <main>\n        <Switch>\n          <Route path=\"/\" exact>\n            <Home />\n          </Route>\n          <Route path=\"/register\">\n            <Register />\n          </Route>\n          <Route path=\"/login\">\n            <Login />\n          </Route>\n          <Route path=\"/search\">\n            <AuthRedirect>\n              <Search />\n            </AuthRedirect>\n          </Route>\n          <Route path=\"/transactions\">\n            <AuthRedirect>\n              <Transactions />\n            </AuthRedirect>\n          </Route>\n          <Route path=\"/stocks/:symbol\">\n            <AuthRedirect>\n              <Symbol />\n            </AuthRedirect>\n          </Route>\n          <Route path=\"/owned\">\n            <AuthRedirect>\n              <Owned />\n            </AuthRedirect>\n          </Route>\n          <Route path=\"/stocks\">\n            <AuthRedirect>\n              <Stocks />\n            </AuthRedirect>\n          </Route>\n        </Switch>\n      </main>\n      <footer>\n        <a href=\"https://iexcloud.io\">Data provided by IEX Cloud</a>\n      </footer>\n    </div>\n  );\n};\n\nconst mapStateToProps = (state) => {\n  return {\n    isAuth: state.auth.isAuth,\n    cash: state.auth.cash,\n    errorMessage: state.auth.errorMessage,\n  };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    onAuthorize: () => {\n      dispatch(actions.authorize());\n    },\n    onDeauthorize: () => {\n      dispatch(actions.deauthorize());\n    },\n    onLoadingFinish: () => {\n      dispatch(actions.loadingFinish());\n    },\n    onSetCash: (cash) => {\n      dispatch(actions.setCash(cash));\n    },\n    onSetErrorMessage: (message) => {\n      dispatch(actions.setErrorMessage(message))\n    }\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","import * as actionTypes from \"../actions/actionTypes\";\n\nconst initialState = {\n  isAuth: false,\n  isLoading: true,\n  errorMessage: \"\",\n};\n\nconst authorize = (state, action) => {\n  return {\n    ...state,\n    isAuth: true,\n  };\n};\n\nconst deauthorize = (state, action) => {\n  return {\n    ...state,\n    isAuth: false,\n  };\n};\n\nconst loadingFinish = (state, action) => {\n  return {\n    ...state,\n    isLoading: false,\n  }\n}\n\nconst setCash = (state, action) => {\n  return {\n    ...state,\n    cash: Number(action.cash)\n  }\n}\n\nconst setErrorMessage = (state, action) => {\n  return {\n    ...state,\n    errorMessage: action.message\n  }\n}\n\nconst reducer = (state = initialState, action) => {\n  switch (action.type) {\n    case actionTypes.AUTHORIZE:\n      return authorize(state, action);\n    case actionTypes.DEAUTHORIZE:\n      return deauthorize(state, action);\n    case actionTypes.LOADING_FINISH:\n      return loadingFinish(state,action);\n    case actionTypes.SET_CASH:\n      return setCash(state, action)\n    case actionTypes.SET_ERROR_MESSAGE:\n      return setErrorMessage(state, action)\n    default:\n      return state;\n  }\n};\n\nexport default reducer;\n","import * as actionTypes from \"../actions/actionTypes\";\n\nconst initialState = {\n  stocks: [],\n  transactions: [],\n  isTransactionsLoaded: false,\n  owned: {},\n};\n\nconst loadStocks = (state, action) => {\n  const stocks = action.stocks;\n  for (let stock of stocks) {\n    stock.buyQuantity = 0;\n    stock.sellQuantity = 0;\n  }\n  return {\n    ...state,\n    stocks: stocks,\n  };\n};\n\n// Add to quantity to buy from user input\nconst updateQuantity = (state, action) => {\n  const stocksCopy = [];\n  for (let stock of state.stocks) {\n    stocksCopy.push({\n      ...stock,\n      prices: [...stock.prices],\n    });\n  }\n\n  // Find index of stock being bought\n  const index = stocksCopy.findIndex((stock) => stock.symbol === action.symbol);\n\n  // Change sell quantity if action was to sell\n  if (action.sell === \"sell\") {\n    stocksCopy[index].sellQuantity = Number(action.value);\n\n    // Do nothing if the value will become negative\n    if (stocksCopy[index].sellQuantity < 0) {\n      stocksCopy[index].sellQuantity = 0;\n    }\n    // If value is greater than the max leave it\n    if (stocksCopy[index].sellQuantity > action.max) {\n      stocksCopy[index].sellQuantity = state.stocks[index].sellQuantity;\n    }\n  } else {\n    stocksCopy[index].buyQuantity = Number(action.value);\n\n    // Do nothing if the value will become negative\n    if (stocksCopy[index].buyQuantity < 0) {\n      stocksCopy[index].buyQuantity = 0;\n    }\n\n    // If value is greater than the max leave it\n    if (stocksCopy[index].sellQuantity > action.max) {\n      stocksCopy[index].sellQuantity = state.stocks[index].sellQuantity;\n    }\n  }\n\n  return {\n    ...state,\n    stocks: stocksCopy,\n  };\n};\n\n// Create inventory of users stocks by summing users transactions\nconst createOwned = (state, transactions) => {\n  const owned = {};\n  for (let transaction of transactions) {\n    const stock = state.stocks.filter((el) => {\n      return transaction.stock === el._id;\n    })[0];\n\n    // If not entry for stock create new\n    if (!owned[stock.symbol]) {\n      owned[stock.symbol] = {};\n      owned[stock.symbol].companyName = stock.companyName;\n      owned[stock.symbol].prices = stock.prices;\n    }\n\n    // Get current quantity or set to 0 if not defined\n    const currentQuantity = owned[stock.symbol].quantity;\n    if (!currentQuantity) {\n      owned[stock.symbol].quantity = 0;\n    }\n    owned[stock.symbol].quantity =\n      owned[stock.symbol].quantity + transaction.quantity;\n  }\n\n  // Delete from owned if quantity is 0\n  for (let key in owned) {\n    if (owned[key].quantity === 0) {\n      delete owned[key];\n    }\n  }\n  return owned;\n};\n\nconst loadTransactions = (state, action) => {\n  const transactions = action.transactions;\n  const owned = createOwned(state, transactions);\n  return {\n    ...state,\n    isTransactionsLoaded: true,\n    transactions,\n    owned,\n  };\n};\n\nconst newTransaction = (state, action) => {\n  const transactions = [...state.transactions, action.transaction];\n  const owned = createOwned(state, transactions);\n  return {\n    ...state,\n    transactions,\n    owned,\n  };\n};\n\nconst addStock = (state, action) => {\n  return {\n    ...state,\n    stocks: [...state.stocks, action.stock],\n  };\n};\n\n// Add id to last added stock if not included\nconst addNewId = (state, action) => {\n  const stocksCopy = [];\n  for (let stock of state.stocks) {\n    stocksCopy.push({\n      ...stock,\n      prices: [...stock.prices],\n    });\n  }\n\n  if (!stocksCopy[stocksCopy.length - 1]._id) {\n    stocksCopy[stocksCopy.length - 1]._id = action._id;\n  }\n\n  return {\n    ...state,\n    stocks: stocksCopy,\n  };\n};\n\nconst stocksReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case actionTypes.LOAD_STOCKS:\n      return loadStocks(state, action);\n    case actionTypes.UPDATE_QUANTITY:\n      return updateQuantity(state, action);\n    case actionTypes.LOAD_TRANSACTIONS:\n      return loadTransactions(state, action);\n    case actionTypes.NEW_TRANSACTION:\n      return newTransaction(state, action);\n    case actionTypes.ADD_STOCK:\n      return addStock(state, action);\n    case actionTypes.ADD_NEW_ID:\n      return addNewId(state, action);\n    default:\n      return state;\n  }\n};\n\nexport default stocksReducer;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport { HashRouter } from \"react-router-dom\";\nimport { Provider } from \"react-redux\";\nimport { createStore, combineReducers, compose, applyMiddleware } from \"redux\";\nimport auth from \"./store/reducers/auth\";\nimport stocks from \"./store/reducers/stocks\"\nimport thunk from \"redux-thunk\";\n\n\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\nconst rootReducer = combineReducers({\n  auth: auth,\n  stocks: stocks,\n});\n\nconst store = createStore(\n  rootReducer,\n  composeEnhancers(applyMiddleware(thunk))\n);\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <HashRouter>\n        <App />\n      </HashRouter>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}